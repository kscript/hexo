<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[合并远程提交记录]]></title>
    <url>%2Fhexo%2F2018%2F12%2F22%2F%E5%90%88%E5%B9%B6%E8%BF%9C%E7%A8%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[1. 选择要操作的记录12345678910// 选择要合并记录的分支git checkout dev// 查看提交记录git log// 选取要操作的记录// -i 后面为一个区间, 它可以是:// 1. 提交记录的hash, 表示选择该记录(不含), 到 最新提交 这个区间// 2. N ~ N1 区间git rebase -i [startpoint] [endpoint] 2. 选择完, 进入vim模式首先, 使用 insert 键切换到编辑模式 12345678910// 编辑前显示的文本pick [hash1] [commit]pick [hash2] [commit]pick [hash3] [commit]// pick 合并后保留的 commitpick [hash1] [commit]// 改为s, 意为合并到 pick 里s [hash2] [commit]s [hash3] [commit] 编辑完毕, 按ESC键, 进入命令模式| 命令 | 说明 |–|–| :w | 写入| :q | 退出, 如果内容有修改, 会提示错误| :q! | 不保存, 强制退出| :wq | 写入并退出| :wq! | 强制写入并退出| :e! | 放弃所有修改，从上次保存文件开始再编辑上面列举了用到的部分命令, 更多命令自己搜… 3. 合并退出vim模式后, git 会对选择的提交记录进行合并, 如果合并时有冲突, 需要修改, 修改以后使用命令12git add .git rebase --continue 你也可以放弃合并12// 放弃合并git rebase --abort 4. 提交12// 强制提交到dev分支git push -f origin dev]]></content>
  </entry>
  <entry>
    <title><![CDATA[合并分支]]></title>
    <url>%2Fhexo%2F2018%2F12%2F22%2F%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%2F</url>
    <content type="text"><![CDATA[123456789101112// 在dev分支内进行开发git checkout devgit add .git commit -m &apos;N次提交代码到dev&apos;git push -u origin dev// 在dev分支完成某些任务后切换到master分支git checkout mastergit merge --squash devgit commit -m &apos;描述下合并过来的这些代码都做了什么&apos;git push -u origin master]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo踩坑记录]]></title>
    <url>%2Fhexo%2F2018%2F12%2F21%2Fhexo%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[开发文档Hexo中文文档 环境搭建 全局安装Hexo-cli 1npm install -g hexo-cli 使用 Hexo-cli 创建Hexo项目 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 配置站点项目根目录下找到 _config.yml 文件, 按照文档给的说明修改 写作 新增文章1hexo new [layout] &lt;title&gt; 如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。新增的文章, 可以在 source_posts\ 文件夹里找到。打开文章md, 文件最上边的两个 --- 放置的是文章的一些信息, 写正文的话另起一行即可 生成1hexo generate 预览开启本地服务1hexo server 发布 使用 git 部署的话, 首先要安装 hexo-deployer-git 1npm install hexo-deployer-git --save 安装完毕, 修改配置 12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 如果习惯于git的话, message可以不用写, 每次提交部署的时候写上 提交部署12// 这里的写法与 git commit 一致, 也可以到_config.yml中去配hexo deploy -m message 个性配置Hexo默认的主题, 会在首页显示文章的全文, 这个问题可以使用 站点首页不显示文章全文 这篇博文提到的办法解决]]></content>
  </entry>
  <entry>
    <title><![CDATA[git生成SSHkey]]></title>
    <url>%2Fhexo%2F2018%2F12%2F21%2Fgit%E7%94%9F%E6%88%90SSHkey%2F</url>
    <content type="text"><![CDATA[1. 配置全局 name 和 email12git config --global user.name &quot;your_account&quot;git config –-global user.email your_email@example.com 2. 生成 SSH Key将以下命令中的邮箱改为自己的邮箱后, 执行命令, 然后连续按回车键三次1ssh-keygen -t rsa -C your_email@example.com 3. 查看生成的 SSH Key1cat ~/.ssh/id_rsa.pub 4. 添加 SSH Key 到 github 配置使用第3步的命令, 或者打开 C:\Users\Administrator\.ssh\id_rsa.pub 文件来获取 SSH Key,然后打开 添加 SSH Key 页面, 自定义一个 title, 并将 SSH Key 粘贴到 Key 输入框, 最后点击 Add 5. 测试 SSH Key1ssh git@github.com]]></content>
  </entry>
</search>
